// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

model User {
  id           String   @id @default(uuid()) @map("id")
  email        String   @unique
  userName     String   @map("user_name")
  avatar       String?
  role         UserRole @default(user)
  passwordHash String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  posts         Post[]
  subscriptions Subscription[]
  Notification  Notification?
  RefreshToken  RefreshToken?
  Comment       Comment[]
  Like          Like[]

  @@index([id, email])
  @@map("users")
}

model Notification {
  id         String   @id @default(uuid()) @map("id")
  userId     String   @unique
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  notifiedAt DateTime @default(now()) @map("notified_at")

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RefreshToken {
  id        String    @id @default(uuid()) @map("id")
  userId    String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiredAt DateTime? @default(now()) @map("expired_at")

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Subscription {
  id              String   @id @default(uuid()) @map("id")
  userId          String   @map("user_id")
  followingUserId String   @map("followed_user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, followingUserId])
  @@index([userId, followingUserId])
  @@map("subscriptions")
}

model Like {
  id        String   @id @default(uuid()) @map("id")
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(uuid()) @map("id")
  text      String
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("comments")
}

enum PostType {
  video
  text
  link
  photo
  quote
}

model Post {
  id                 String    @id @default(uuid()) @map("id")
  type               PostType
  userId             String    @map("user_id")
  repostedFromPostId String?   @map("reposted_from_post_id")
  createdAt          DateTime  @default(now()) @map("created_at")
  publishedAt        DateTime? @default(now()) @map("published_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  text         String?
  link         String?
  author       String?
  name         String?
  announcement String?
  fileId       String? @map("file_id")

  comments    Comment[]
  likes       Like[]
  User        User          @relation(fields: [userId], references: [id])
  LinkPostTag LinkPostTag[]

  @@index([userId, type])
  @@map("posts")
}

model Tag {
  id        String   @id @default(uuid()) @map("id")
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  LinkPostTag LinkPostTag[]

  @@map("tags")
}

model LinkPostTag {
  id        String   @id @default(uuid()) @map("id")
  postId    String   @map("post_id")
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  Tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("links_post_tag")
}
